import os
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


def get_dialogue(storyline, num_characters, max_words):
    """
    Returns the generated dialogue as a string value.
    Parameters:
        storyline (str): The storyline of the dialogue.
        num_characters (int): The number of characters to generate.
        max_words (int): The maximum number of words to generate.
    """
    prompt = f"""
    You are a screenwriter. Based on the following movie storyline, generate a dialogue script between {num_characters} characters. The total dialogue should be under {max_words} words.

    Storyline: "{storyline}"

    Make the dialogue engaging and character-driven.
    Make it similar to films that match the storyline.
    """

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are a helpful assistant that writes movie dialogues."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7,
        max_tokens=int(max_words * 1.5)
    )
    return response.choices[0].message.content

def get_scene_description(dialogue):
    """
    Uses LLM to extract or generate a short scene description (atmosphere)
    based on the dialogue. Keeps it under 1000 characters (as 1000 is the max characters the image generation model can take).
    """
    prompt = f"""
    You are a helpful assistant. Summarise the following movie dialogue into a vivid, atmospheric scene description under **800 characters** (not words). Focus only on setting, emotion, lighting, and character actions.

    Dialogue:
    {dialogue}
    """

    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": "You are an assistant that writes short scene descriptions from movie scripts."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.5,
        max_tokens=510  # ~1000 characters max (including the addition to the prompt in the get_image method)
    )
    return response.choices[0].message.content.strip()

def get_image(location, style, dialogue):
    """
    Returns a URL to the generated image.
    Parameters:
        location (str): The location of the image.
        style (str): The style of the image.
        dialogue (str): The dialogue generated by get_dialogue.
    """

    scene_description = get_scene_description(dialogue)

    prompt = f"{scene_description} The scene is set in {location}, depicted in a {style} style. The image should be a depiction of the description provided."
    prompt = prompt[:1000]
    try:
        response = client.images.generate(
            prompt=prompt,
            n=1,
            size="512x512"
        )
        return response.data[0].url
    except Exception as e:
        print("Image generation failed:", e)
        return None
